#
# Makefile fragment for JOS kernel.
# This is NOT a complete makefile;
# you must run GNU make in the top-level directory
# where the GNUmakefile is located.
#

OBJDIRS += kern

KERN_LDFLAGS := $(LDFLAGS) -T kern/riscv/kernel.ld -nostdlib

# entry.S must be first, so that it's the first code in the text segment!!!
#
# We also snatch the use of a couple handy source files
# from the lib directory, to avoid gratuitous code duplication.
KERN_SRCFILES :=	kern/riscv/entry.S \
			kern/riscv/entrypgdir.c \
			kern/riscv/init.c \
			kern/riscv/console.c \
			kern/riscv/monitor.c \
			kern/riscv/printf.c \
			kern/riscv/sbi.c \
			kern/riscv/pmap.c \
			lib/riscv/printfmt.c \
			lib/riscv/readline.c \
			lib/riscv/string.c \
			kern/riscv/env.c  \
			kern/riscv/syscall.c  \
			kern/riscv/trapentry.S  \
			kern/riscv/trap.c 

# Binary program images to embed within the kernel.
# Binary files for LAB3
KERN_BINFILES :=	user/riscv/hello \
			user/riscv/softint \
			user/riscv/divzero \
			user/riscv/faultread \
			user/riscv/faultreadkernel \
			user/riscv/faultwrite \
			user/riscv/faultwritekernel \
			user/riscv/breakpoint 
#			user/riscv/buggyhello \
			user/riscv/buggyhello2 \
			user/riscv/evilhello \
			user/riscv/testbss \

# Only build files if they exist.
KERN_SRCFILES := $(wildcard $(KERN_SRCFILES))


KERN_OBJFILES := $(patsubst %.c, $(OBJDIR)/kern/%.o, $(notdir $(KERN_SRCFILES)))
KERN_OBJFILES := $(patsubst %.S, $(OBJDIR)/kern/%.o, $(KERN_OBJFILES))

KERN_OBJFILES := $(patsubst $(OBJDIR)/lib/%, $(OBJDIR)/kern/%, $(KERN_OBJFILES))

KERN_BINFILES := $(patsubst %, $(OBJDIR)/user/%, $(notdir $(KERN_BINFILES)))

# How to build kernel object files
$(OBJDIR)/kern/%.o: kern/riscv/%.c $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

$(OBJDIR)/kern/%.o: kern/riscv/%.S $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + as $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<


$(OBJDIR)/kern/%.o: lib/riscv/%.c $(OBJDIR)/.vars.KERN_CFLAGS
	@echo + cc $<
	@mkdir -p $(@D)
	$(V)$(CC) -nostdinc $(KERN_CFLAGS) -c -o $@ $<

# Special flags for kern/init
$(OBJDIR)/kern/init.o: override KERN_CFLAGS+=$(INIT_CFLAGS)
$(OBJDIR)/kern/init.o: $(OBJDIR)/.vars.INIT_CFLAGS

# How to build the kernel itself
$(OBJDIR)/kern/kernel: $(KERN_OBJFILES) $(KERN_BINFILES) kern/riscv/kernel.ld \
	  $(OBJDIR)/.vars.KERN_LDFLAGS
	@echo + ld $@
	$(V)$(LD) -o $@ $(KERN_LDFLAGS) $(KERN_OBJFILES) $(GCC_LIB) -b elf64-littleriscv $(foreach fo, $(KERN_BINFILES), $(addsuffix _,$(fo)))
	$(V)$(OBJDUMP) -S $@ > $@.asm
	$(V)$(NM) -n $@ > $@.sym

# How to build the kernel disk image
$(OBJDIR)/kern/kernel.img: $(OBJDIR)/kern/kernel $(OBJDIR)/boot/boot
	@echo + mk $@
	$(V)dd bs=1k count=32k if=/dev/zero of=$(OBJDIR)/kern/kernel.img~ 2>/dev/null
	$(V)dd bs=1k seek=0   conv=notrunc if=$(OBJDIR)/boot/boot of=$(OBJDIR)/kern/kernel.img~ 2>/dev/null
	$(V)dd bs=1k seek=512 conv=notrunc if=$(TOP)/opensbi/fw_jump.bin of=$(OBJDIR)/kern/kernel.img~ 2>/dev/null
	$(V)dd bs=1k seek=1k if=$(OBJDIR)/kern/kernel of=$(OBJDIR)/kern/kernel.img~ conv=notrunc 2>/dev/null
	$(V)mv $(OBJDIR)/kern/kernel.img~ $(OBJDIR)/kern/kernel.img

all: $(OBJDIR)/kern/kernel.img

grub: $(OBJDIR)/jos-grub

$(OBJDIR)/jos-grub: $(OBJDIR)/kern/kernel
	@echo + oc $@
	$(V)$(OBJCOPY) --adjust-vma=0x10000000 $^ $@
